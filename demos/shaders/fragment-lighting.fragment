#ifdef GL_ES
precision highp float;
#endif

uniform mat4 u_viewMatrix;

uniform bool u_enableLighting;
uniform vec3 u_ambientColor;
uniform vec3 u_directionalColor;
uniform vec3 u_lightingDirection;
		
uniform bool u_enableLight1;
uniform vec3 u_lightColor1;
uniform vec3 u_lightPosition1;
uniform vec3 u_lightSpecularColor1;
		
uniform bool u_enableLight2;
uniform vec3 u_lightColor2;
uniform vec3 u_lightPosition2;
uniform vec3 u_lightSpecularColor2;
	
uniform bool u_enableLight3;
uniform vec3 u_lightColor3;
uniform vec3 u_lightPosition3;
uniform vec3 u_lightSpecularColor3;
		
uniform bool u_enableLight4;
uniform vec3 u_lightColor4;
uniform vec3 u_lightPosition4;
uniform vec3 u_lightSpecularColor4;

uniform float u_shininess;

uniform bool u_enableTexturing;
uniform bool u_useTexture0;
uniform sampler2D tex0;

varying vec4 v_position;
varying vec4 v_normal;
varying vec4 v_color;
varying vec2 v_texcoord;

void main(void) {
	vec3 lightFactor;
	if (!u_enableLighting) {
		lightFactor = vec3(1.0, 1.0, 1.0);
	} else {
		vec3 lightDirection;
		vec3 lightPosition;
		vec3 reflectDirection;
		vec3 diffuseLight = vec3(0.0, 0.0, 0.0);
		vec3 specularLight = vec3(0.0, 0.0, 0.0);
		
		vec3 normal = normalize(v_normal.xyz);
		vec3 directionalFactor = max(0.0, dot(normal, -u_lightingDirection)) * u_directionalColor;
		vec3 eye = normalize(-v_position.xyz);
		
		if (u_enableLight1) {
			lightPosition = (u_viewMatrix * vec4(u_lightPosition1, 1.0)).xyz;
			lightDirection = normalize(lightPosition - v_position.xyz);
			reflectDirection = reflect(-lightDirection, normal);
			diffuseLight += max(0.0, dot(normal, lightDirection)) * u_lightColor1;
			specularLight += pow(max(0.0, dot(reflectDirection, eye)), u_shininess) * u_lightSpecularColor1;
		}
		
		if (u_enableLight2) {
			lightPosition = (u_viewMatrix * vec4(u_lightPosition2, 1.0)).xyz;
			lightDirection = normalize(lightPosition - v_position.xyz);
			reflectDirection = reflect(-lightDirection, normal);
			diffuseLight += max(0.0, dot(normal, lightDirection)) * u_lightColor2;
			specularLight += pow(max(0.0, dot(reflectDirection, eye)), u_shininess) * u_lightSpecularColor2;
		}
		
		if (u_enableLight3) {
			lightPosition = (u_viewMatrix * vec4(u_lightPosition3, 1.0)).xyz;
			lightDirection = normalize(lightPosition - v_position.xyz);
			reflectDirection = reflect(-lightDirection, normal);
			diffuseLight += max(0.0, dot(normal, lightDirection)) * u_lightColor3;
			specularLight += pow(max(0.0, dot(reflectDirection, eye)), u_shininess) * u_lightSpecularColor3;
		}
		
		if (u_enableLight4) {
			lightPosition = (u_viewMatrix * vec4(u_lightPosition4, 1.0)).xyz;
			lightDirection = normalize(lightPosition - v_position.xyz);
			reflectDirection = reflect(-lightDirection, normal);
			diffuseLight += max(0.0, dot(normal, lightDirection)) * u_lightColor4;
			specularLight += pow(max(0.0, dot(reflectDirection, eye)), u_shininess) * u_lightSpecularColor4;
		}
		
		lightFactor = u_ambientColor + directionalFactor + diffuseLight + specularLight;
	}
	
	vec4 fragmentColor = vec4(1.0, 1.0, 1.0, 1.0);
	if (u_enableTexturing) {
		if (u_useTexture0) {
			fragmentColor = texture2D(tex0, vec2(v_texcoord.s, v_texcoord.t));
		}
	}
	
	gl_FragColor = vec4(fragmentColor.rgb * lightFactor, fragmentColor.a);
}
